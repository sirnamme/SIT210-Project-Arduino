#include <WiFiNINA.h>
#include <ArduinoHttpClient.h>

const char* ssid = "POCOF3";
const char* password = "namme36626";

int soilPin = A0;
int relayPin = 2;

WiFiClient client;
char serverAddress[] = "192.168.194.55";  // Flask server IP
int port = 5000;

bool manualOverride = false;
bool manualPumpState = false;
bool wasConnected = false;

unsigned long lastReconnectAttempt = 0;
const unsigned long reconnectInterval = 300000; // 5 minutes

void setup() {
  Serial.begin(9600);
  pinMode(soilPin, INPUT);
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW);

  connectToWiFi(); // Initial connection
}

void loop() {
  int moisture = analogRead(soilPin);
  Serial.print("Soil Moisture: ");
  Serial.println(moisture);

  // Check if WiFi is connected
  if (WiFi.status() == WL_CONNECTED) {
    if (!wasConnected) {
      Serial.println("WiFi Reconnected");
      wasConnected = true;
    }

    // Send moisture data
    if (client.connect(serverAddress, port)) {
      client.print("GET /update?moisture=");
      client.print(moisture);
      client.println(" HTTP/1.1");
      client.print("Host: ");
      client.println(serverAddress);
      client.println("Connection: close");
      client.println();
      client.stop();
    }

    // Get command from GUI
    delay(200); // Brief wait before reading command
    String command = getPumpCommand();

    if (command == "manual_on") {
      manualOverride = true;
      manualPumpState = true;
      Serial.println("Manual command: ON");
    } else if (command == "manual_off") {
      manualOverride = true;
      manualPumpState = false;
      Serial.println("Manual command: OFF");
    } else if (command == "auto") {
      manualOverride = false;
      Serial.println("Command: AUTO mode");
    }

  } else {
    // Not connected: run in auto mode only
    if (wasConnected) {
      Serial.println("WiFi lost. Reverting to AUTO mode.");
      wasConnected = false;
      manualOverride = false;
    }

    // Attempt to reconnect every 5 minutes
    if (millis() - lastReconnectAttempt > reconnectInterval) {
      lastReconnectAttempt = millis();
      connectToWiFi();
    }
  }

  // Handle pump logic
  if (manualOverride) {
    digitalWrite(relayPin, manualPumpState ? HIGH : LOW);
  } else {
    if (moisture < 700) {
      digitalWrite(relayPin, LOW); // Pump ON
      Serial.println("Pump ON (Auto)");
    } else {
      digitalWrite(relayPin, HIGH); // Pump OFF
      Serial.println("Pump OFF (Auto)");
    }
  }

  delay(5000); // Main loop delay
}

void connectToWiFi() {
  Serial.println("Connecting to WiFi...");
  WiFi.begin(ssid, password);
  unsigned long startAttempt = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttempt < 10000) {
    delay(1000);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConnected to WiFi.");
    wasConnected = true;
  } else {
    Serial.println("\nFailed to connect. Starting in AUTO mode.");
    wasConnected = false;
  }
}

String getPumpCommand() {
  String response = "";
  if (client.connect(serverAddress, port)) {
    client.print("GET /command HTTP/1.1\r\n");
    client.print("Host: ");
    client.println(serverAddress);
    client.println("Connection: close");
    client.println();

    unsigned long timeout = millis();
    while (client.available() == 0) {
      if (millis() - timeout > 2000) {
        Serial.println(">>> Timeout getting command");
        client.stop();
        return "";
      }
    }

    // Skip headers
    while (client.available()) {
      String line = client.readStringUntil('\n');
      if (line == "\r") break;
    }

    // Read body
    while (client.available()) {
      char c = client.read();
      response += c;
    }

    client.stop();
  }

  response.trim();
  Serial.print("Command response: ");
  Serial.println(response);
  return response;
}
